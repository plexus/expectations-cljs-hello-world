;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name jx.reporter.karma, :imports nil, :requires {cljs.test cljs.test}, :uses nil, :defs {karma {:name jx.reporter.karma/karma, :file "out/jx/reporter/karma.cljs", :line 4, :column 1, :end-line 4, :end-column 11, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 4, :column 6, :end-line 4, :end-column 11}}, karma? {:protocol-inline nil, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 6, :column 7, :end-line 6, :end-column 13, :arglists (quote ([]))}, :name jx.reporter.karma/karma?, :variadic false, :file "out/jx/reporter/karma.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, karma-info! {:protocol-inline nil, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 8, :column 8, :end-line 8, :end-column 19, :private true, :arglists (quote ([m]))}, :private true, :name jx.reporter.karma/karma-info!, :variadic false, :file "out/jx/reporter/karma.cljs", :end-column 19, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, karma-result! {:protocol-inline nil, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 11, :column 8, :end-line 11, :end-column 21, :private true, :arglists (quote ([m]))}, :private true, :name jx.reporter.karma/karma-result!, :variadic false, :file "out/jx/reporter/karma.cljs", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, karma-complete! {:protocol-inline nil, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 14, :column 8, :end-line 14, :end-column 23, :private true, :arglists (quote ([]))}, :private true, :name jx.reporter.karma/karma-complete!, :variadic false, :file "out/jx/reporter/karma.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, now {:protocol-inline nil, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 17, :column 8, :end-line 17, :end-column 11, :private true, :arglists (quote ([]))}, :private true, :name jx.reporter.karma/now, :variadic false, :file "out/jx/reporter/karma.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, test-var-result {:name jx.reporter.karma/test-var-result, :file "out/jx/reporter/karma.cljs", :line 20, :column 1, :end-line 20, :end-column 21, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 20, :column 6, :end-line 20, :end-column 21}}, test-var-time-start {:name jx.reporter.karma/test-var-time-start, :file "out/jx/reporter/karma.cljs", :line 22, :column 1, :end-line 22, :end-column 25, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 22, :column 6, :end-line 22, :end-column 25}}, start {:protocol-inline nil, :meta {:file "/home/arne/github/expectations-cljs-hello-world/out/jx/reporter/karma.cljs", :line 54, :column 7, :end-line 54, :end-column 12, :arglists (quote ([tc total-count]))}, :name jx.reporter.karma/start, :variadic false, :file "out/jx/reporter/karma.cljs", :end-column 12, :method-params ([tc total-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tc total-count]))}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{:begin-test-var :ns :name :karma :end-test-var :total :fail :jx.reporter.karma/karma :var :end-run-tests :expected :error :actual}, :order [:karma :jx.reporter.karma/karma :begin-test-var :end-test-var :var :ns :name :expected :actual :fail :error :end-run-tests :total]}, :doc nil}