;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{set-print-fn! run!}, :name doo.runner, :imports nil, :requires {cljs.test cljs.test, gobj goog.object, goog.object goog.object, karma jx.reporter.karma, jx.reporter.karma jx.reporter.karma}, :uses {successful? cljs.test}, :defs {set-print-fn! {:protocol-inline nil, :meta {:file "/tmp/expectations-cljs-hello-world/out/doo/runner.cljs", :line 12, :column 16, :end-line 12, :end-column 29, :export true, :arglists (quote ([f]))}, :name doo.runner/set-print-fn!, :variadic false, :file "out/doo/runner.cljs", :end-column 29, :method-params ([f]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, node? {:protocol-inline nil, :meta {:file "/tmp/expectations-cljs-hello-world/out/doo/runner.cljs", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([]))}, :name doo.runner/node?, :variadic false, :file "out/doo/runner.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, karma? {:protocol-inline nil, :meta {:file "/tmp/expectations-cljs-hello-world/out/doo/runner.cljs", :line 24, :column 7, :end-line 24, :end-column 13, :arglists (quote ([]))}, :name doo.runner/karma?, :variadic false, :file "out/doo/runner.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, *exit-fn* {:name doo.runner/*exit-fn*, :file "out/doo/runner.cljs", :line 34, :column 1, :end-line 34, :end-column 25, :dynamic true, :meta {:file "/tmp/expectations-cljs-hello-world/out/doo/runner.cljs", :line 34, :column 16, :end-line 34, :end-column 25, :dynamic true}}, set-exit-point! {:protocol-inline nil, :meta {:file "/tmp/expectations-cljs-hello-world/out/doo/runner.cljs", :line 36, :column 16, :end-line 36, :end-column 31, :export true, :arglists (quote ([f])), :doc "Sets the fn to be called when exiting the script.\n   It should take one bool argument: successful?"}, :name doo.runner/set-exit-point!, :variadic false, :file "out/doo/runner.cljs", :end-column 31, :method-params ([f]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Sets the fn to be called when exiting the script.\n   It should take one bool argument: successful?"}, exit! {:protocol-inline nil, :meta {:file "/tmp/expectations-cljs-hello-world/out/doo/runner.cljs", :line 43, :column 7, :end-line 43, :end-column 12, :arglists (quote ([success?]))}, :name doo.runner/exit!, :variadic false, :file "out/doo/runner.cljs", :end-column 12, :method-params ([success?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([success?]))}, run! {:protocol-inline nil, :meta {:file "/tmp/expectations-cljs-hello-world/out/doo/runner.cljs", :line 60, :column 16, :end-line 60, :end-column 20, :export true, :arglists (quote ([a]))}, :name doo.runner/run!, :variadic false, :file "out/doo/runner.cljs", :end-column 20, :method-params ([a]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a]))}, set-entry-point! {:protocol-inline nil, :meta {:file "/tmp/expectations-cljs-hello-world/out/doo/runner.cljs", :line 68, :column 7, :end-line 68, :end-column 23, :arglists (quote ([f])), :doc "Sets the function to be run when starting the script"}, :name doo.runner/set-entry-point!, :variadic false, :file "out/doo/runner.cljs", :end-column 23, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Sets the function to be run when starting the script"}}, :require-macros {cljs.test cljs.test, karma jx.reporter.karma, jx.reporter.karma jx.reporter.karma}, :cljs.analyzer/constants {:seen #{:ns :jx.reporter.karma/karma :end-run-tests :cljs.test/default :begin-test-ns}, :order [:jx.reporter.karma/karma :begin-test-ns :ns :cljs.test/default :end-run-tests]}, :doc nil}